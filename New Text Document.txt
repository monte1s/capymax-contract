To integrate WebSocket functionality into a Python Flask application, you can use the `Flask-SocketIO` extension. `Flask-SocketIO` provides a simple way to set up WebSocket communication, allowing you to add real-time features to your Flask app.

### Basic Steps to Integrate WebSocket with Flask

1. **Install Required Packages:**

   You need to install `Flask`, `Flask-SocketIO`, and a WebSocket server (such as `eventlet` or `gevent`). You can install these using pip:

   ```bash
   pip install Flask Flask-SocketIO eventlet
   ```

2. **Set Up the Flask Application:**

   Import the necessary modules and set up the Flask application with `SocketIO`.

   ```python
   from flask import Flask, render_template
   from flask_socketio import SocketIO, emit

   app = Flask(__name__)
   app.config['SECRET_KEY'] = 'your_secret_key'
   socketio = SocketIO(app)

   @app.route('/')
   def index():
       return render_template('index.html')  # Replace with your template

   if __name__ == '__main__':
       socketio.run(app, debug=True)
   ```

3. **Create Event Handlers:**

   Define functions that will handle WebSocket events. Use the `@socketio.on` decorator to specify the event name.

   ```python
   @socketio.on('message')
   def handle_message(data):
       print('Received message:', data)
       emit('response', {'data': 'Message received!'})
   ```

   Here, the `handle_message` function will be called whenever a client sends a message event. You can also emit messages to the client using the `emit` function.

4. **Client-Side Integration:**

   On the client side, use JavaScript to connect to the WebSocket server and handle events. You can use the `socket.io` client library.

   ```html
   <!DOCTYPE html>
   <html>
   <head>
       <title>WebSocket Test</title>
       <script src="https://cdn.socket.io/4.0.0/socket.io.min.js"></script>
   </head>
   <body>
       <script>
           var socket = io();

           socket.on('connect', function() {
               console.log('Connected to server');
               socket.send('Hello from client!');
           });

           socket.on('response', function(data) {
               console.log(data);
           });

           socket.on('disconnect', function() {
               console.log('Disconnected from server');
           });
       </script>
   </body>
   </html>
   ```

5. **Run the Application:**

   Run your Flask application. Make sure you're using `socketio.run(app)` instead of `app.run()` to ensure proper WebSocket handling.

   ```bash
   python app.py
   ```

### Using Eventlet or Gevent

`Flask-SocketIO` requires an asynchronous server to handle multiple WebSocket connections. You can use either `eventlet` or `gevent` for this purpose.

- **Eventlet:** To use `eventlet`, simply install it and specify it when running the app:

  ```bash
  pip install eventlet
  ```

  In your app:

  ```python
  if __name__ == '__main__':
      socketio.run(app, debug=True, host='0.0.0.0', port=5000, use_reloader=False)
  ```

  Optionally, add `import eventlet` and `eventlet.monkey_patch()` at the beginning of your script.

- **Gevent:** Similarly, for `gevent`:

  ```bash
  pip install gevent
  ```

  In your app:

  ```python
  if __name__ == '__main__':
      socketio.run(app, debug=True, host='0.0.0.0', port=5000, use_reloader=False)
  ```

  Optionally, add `from gevent import monkey` and `monkey.patch_all()` at the beginning of your script.

### Additional Considerations

- **Security:** Make sure to use HTTPS and WSS for secure WebSocket connections, especially in production environments.
- **Scaling:** If you need to scale your application, consider using a message broker like Redis with `Flask-SocketIO` to support multiple instances.

This basic setup should get you started with integrating WebSocket functionality into your Flask application. You can further customize and expand the setup based on your specific requirements.